name: Build and Release Lal Singh Xiaomi Kernel

on:
  workflow_dispatch:
    inputs:
      model:
        description: "Device codename"
        required: true
        default: veux
      branch:
        description: "Kernel source branch"
        required: false
        default: main
      optimize_level:
        description: "Optimization level"
        required: false
        default: O2 # Choices: O2 or O3
      ksun_branch:
        description: "KernelSU branch"
        required: false
        default: stable
      susfs_branch:
        description: "SUSFS branch/commit"
        required: false
        default: main

jobs:
  build:
    runs-on: ubuntu-22.04

    permissions:
      contents: write

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: lalsingh1985/kernel_xiaomi_sm6375
          ref: ${{ inputs.branch }}
          path: kernel

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential git bc bison flex libssl-dev \
            libncurses-dev libelf-dev ccache curl unzip \
            wget clang lld llvm zlib1g-dev libxml2-utils \
            python3 rsync file

      - name: Setup KernelSU-Next
        run: |
          cd kernel
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          git submodule update --init --recursive

      - name: Apply SUSFS
        run: |
          cd kernel
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu
          git checkout ${{ inputs.susfs_branch }} || true
          cd ..
          cp -r susfs4ksu/kernel_patches/fs/* ./fs/ || true
          cp -r susfs4ksu/kernel_patches/include/linux/* ./include/linux/ || true
          echo "CONFIG_KSU=y" >> arch/arm64/configs/veux_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> arch/arm64/configs/veux_defconfig

      - name: Branding Kernel (Lal Singh)
        run: |
          cd kernel
          echo "-LalSingh" > LOCALVERSION
          sed -i 's/^EXTRAVERSION.*/EXTRAVERSION = -LalSingh/' Makefile

      - name: Detect Clang
        run: |
          clang --version
          echo "CLANG_BIN_PATH=$(dirname $(which clang))" >> $GITHUB_ENV

      - name: Build Kernel
        run: |
          cd kernel
          export PATH="${CLANG_BIN_PATH}:$PATH"
          export ARCH=arm64 SUBARCH=arm64
          export LLVM=1 LLVM_IAS=1
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          OUT=out
          mkdir -p $OUT

          make O=$OUT vendor/veux-qgki_defconfig

          if [ "${{ inputs.optimize_level }}" = "O3" ]; then
            scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
            scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
            export KCFLAGS="-O3 -pipe -march=armv8-a -flto=thin -fgraphite-identity -floop-nest-optimize"
          else
            scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
            scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
            export KCFLAGS="-O2 -pipe -march=armv8-a -flto=thin"
          fi

          make O=$OUT olddefconfig
          make -j$(nproc --all) O=$OUT

          sha256sum $OUT/arch/arm64/boot/Image

      - name: Package AnyKernel3
        run: |
          git clone --depth=1 https://github.com/TheWildJames/AnyKernel3.git AnyKernel3
          cp kernel/out/arch/arm64/boot/Image AnyKernel3/
          cd AnyKernel3
          ZIP_NAME="LalSingh_${{ inputs.model }}_${{ inputs.optimize_level }}_KSU_SUSFS.zip"
          zip -r9 "../$ZIP_NAME" ./*

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: LalSingh-${{ inputs.model }}-Kernel
          path: LalSingh_${{ inputs.model }}_${{ inputs.optimize_level }}_KSU_SUSFS.zip
