name: Build Lal Singh Xiaomi Kernel (KernelSU Next + LLVM Release)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: lalsingh1985/kernel_xiaomi_sm6375
          path: kernel

      - name: Install Dependencies (Minimal)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential bc bison flex libssl-dev \
            libncurses-dev libelf-dev wget curl zip

      - name: Download & Setup LLVM/Clang
        run: |
          mkdir -p $GITHUB_WORKSPACE/toolchains
          cd $GITHUB_WORKSPACE/toolchains

          # Pick latest LLVM release (example: 21.1.0)
          LLVM_VERSION=21.1.0
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-22.04.tar.xz
          tar -xf clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-22.04.tar.xz
          mv clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-22.04 llvm

          echo "$GITHUB_WORKSPACE/toolchains/llvm/bin" >> $GITHUB_PATH

      - name: Apply KernelSU Next Patch
        run: |
          cd kernel
          git clone --depth=1 https://github.com/KernelSU-Next/kernel_patches.git ksu_patches
          git apply --ignore-space-change --ignore-whitespace ksu_patches/5.4/KernelSU-Next.patch
          echo "CONFIG_KSU=y" >> arch/arm64/configs/vendor/veux-qgki_defconfig

      - name: Build Kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export LLVM=1
          export CC=clang
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          export LLVM_IAS=1

          OUT=out
          mkdir -p $OUT
          make O=$OUT vendor/veux-qgki_defconfig

          # Enable ThinLTO
          scripts/config --file $OUT/.config --enable LTO_CLANG || true
          scripts/config --file $OUT/.config --enable LTO_CLANG_THIN || true
          scripts/config --file $OUT/.config --enable HAVE_LLD || true
          make O=$OUT olddefconfig

          make -j$(nproc) O=$OUT

      - name: Package with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git AnyKernel
          cp kernel/out/arch/arm64/boot/Image AnyKernel/
          cp kernel/out/arch/arm64/boot/dtb.img AnyKernel/ || true
          cp kernel/out/arch/arm64/boot/dtbo.img AnyKernel/ || true
          cd AnyKernel
          zip -r9 ../LalSingh-veux-KSU.zip ./*

      - name: Upload Kernel
        uses: actions/upload-artifact@v4
        with:
          name: LalSingh-veux-KSU
          path: LalSingh-veux-KSU.zip
